/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculator = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"block":4,"DOT":5,"EOF":6,"consts":7,"vars":8,"proclists":9,"statement":10,"CONST":11,"assignment":12,"constlist":13,";":14,",":15,"VAR":16,"ID":17,"varlist":18,"decl_proc":19,"arguments":20,"PROCEDURE":21,"(":22,")":23,"=":24,"expression":25,"CALL":26,"BEGIN":27,"statementlist":28,"END":29,"IF":30,"condition":31,"THEN":32,"WHILE":33,"DO":34,"ODD":35,"==":36,"#":37,"<":38,"<=":39,">":40,">=":41,"number":42,"NUMBER":43,"PI":44,"E":45,"+":46,"-":47,"*":48,"/":49,"^":50,"!":51,"%":52,"$accept":0,"$end":1},
terminals_: {2:"error",5:"DOT",6:"EOF",11:"CONST",14:";",15:",",16:"VAR",17:"ID",21:"PROCEDURE",22:"(",23:")",24:"=",26:"CALL",27:"BEGIN",29:"END",30:"IF",32:"THEN",33:"WHILE",34:"DO",35:"ODD",36:"==",37:"#",38:"<",39:"<=",40:">",41:">=",43:"NUMBER",44:"PI",45:"E",46:"+",47:"-",48:"*",49:"/",50:"^",51:"!",52:"%"},
productions_: [0,[3,3],[4,4],[7,0],[7,4],[13,0],[13,3],[8,0],[8,4],[18,0],[18,3],[9,0],[9,6],[19,2],[20,0],[20,4],[10,3],[10,3],[10,4],[10,4],[10,4],[28,0],[28,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[12,3],[42,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,2],[25,3],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
          this.$ = $$[$0-2]; 
          //console.log(this.$);
          //return [this.$, symbol_table];
          return this.$;
        
break;
case 2:
          $$[$0-3] ? c = $$[$0-3] : c = 'NULL'
          //if ($$[$0-3]) c = $$[$0-3];
          //else c = 'NULL';
          $$[$0-2] ? v = $$[$0-2] : v = 'NULL'
          $$[$0-1] ? p = $$[$0-1] : p = 'NULL'
          
           this.$ = {
                type: 'BLOCK',
                consts: c,
                vars: v,
                procs: p,
                stat: $$[$0],
                scope: scope
           };
       
break;
case 4:
          cl = [$$[$0-2]];
          if ($$[$0-1] && $$[$0-1].length > 0)
             cl = cl.concat($$[$0-1]);
          this.$ = {
             type: 'CONST',
             const_list: cl,
             scope: scope
          };
       
break;
case 6:
          this.$ = [$$[$0-1]];
          if ($$[$0] && $$[$0].length > 0)
             this.$ = this.$.concat($$[$0]);
       
break;
case 8:
          vl = [$$[$0-2]];
          symbol_table[$$[$0-2]] = 0.0;
          if ($$[$0-1] && $$[$0-1].length > 0){
             vl = vl.concat($$[$0-1]);
          }
          this.$ = {
             type: 'VAR',
             var_list: vl,
             scope: scope
          };
       
break;
case 10:
          symbol_table[$$[$0-1]] = 0.0;
          this.$ = [$$[$0-1]];
          if ($$[$0] && $$[$0].length > 0){
             this.$ = this.$.concat($$[$0]);
          }
       
break;
case 12:
         ambito = {
            type: $$[$0-5].type,
            name: $$[$0-5].name,
            arg: $$[$0-4],
            bl: $$[$0-2],
            scope: $$[$0-5].scope,
            value: $$[$0-2].value
         };
         this.$ = ambito;
         symbol_table[$$[$0-5].name] = {arg: ambito.arg, bl: ambito.bl, value: ambito.value};
         getFormerScope();
      
break;
case 13:
         makeNewScope();
         //throw new Error("ID: "+$$[$0]);         
         symbol_table[$$[$0]] = -1
         this.$ = {
            type: $$[$0-1],
            name: $$[$0],
            scope: scope
         };
      
break;
case 15:
         this.$ = [$$[$0-2]]
         if ($$[$0-1] && $$[$0-1].length > 0)
             this.$ = this.$.concat($$[$0-1]);
      
break;
case 16:
          if (!symbol_table[$$[$0-2]])
             throw new Error($$[$0-2] + " undefined");
          else
             symbol_table[$$[$0-2]] = $$[$0].value;
          this.$ = {
            type: $$[$0-1],
            name: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: $$[$0].value
        };
      
break;
case 17:
         if (!symbol_table[$$[$0-1]])
            throw new Error("Don't exist the procedure or function "+$$[$0-1]);
         this.$ = {
           type: $$[$0-2],
           name: $$[$0-1],
           arg: $$[$0],
           scope: scope,
           value: symbol_table[$$[$0-1]]
         };
      
break;
case 18:
         sl = [$$[$0-2]];
         if ($$[$0-1] && $$[$0-1].length > 0)
             sl = sl.concat($$[$0-1]);
         this.$ = {
            type: $$[$0-3],
            statement_list: sl
         };
      
break;
case 19:
         this.$ = {
            type: $$[$0-3],
            cond: $$[$0-2],
            //st: $$[$0],
            st: ($$[$0-2].value == 1) ? $$[$0] : 'NULL',
            scope: scope,
            value: ($$[$0-2].value == 1) ? $$[$0].value : 0
         };
      
break;
case 20:
         this.$ = {
            type: $$[$0-3],
            cond: $$[$0-2],
            st: ($$[$0-2].value == 1) ? $$[$0] : 'NULL',
            scope: scope,
            value: ($$[$0-2].value == 1) ? $$[$0].value : 0
         };
      
break;
case 22:
          this.$ = [$$[$0-1]];
          if ($$[$0] && $$[$0].length > 0)
             this.$ = this.$.concat($$[$0]);
       
break;
case 23:
         this.$ = {
            type: $$[$0-1],
            right: $$[$0],
            scope: scope,
            value: odd($$[$0].value)
         };
      
break;
case 24:
         this.$ = {
            type: 'COMPARISSON ==',
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: ($$[$0-2].value == $$[$0].value) ? 1 : 0
         };
      
break;
case 25:
         this.$ = {
            type: 'COMPARISSON #',
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: ($$[$0-2].value != $$[$0].value) ? 1 : 0
         };
      
break;
case 26:
         this.$ = {
            type: 'COMPARISSON <',
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: ($$[$0-2].value < $$[$0].value) ? 1 : 0
         };
      
break;
case 27:
         this.$ = {
            type: 'COMPARISSON <=',
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: ($$[$0-2].value <= $$[$0].value) ? 1 : 0
         };
      
break;
case 28:
         this.$ = {
            type: 'COMPARISSON >',
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: ($$[$0-2].value > $$[$0].value) ? 1 : 0
         };
      
break;
case 29:
         this.$ = {
            type: 'COMPARISSON >=',
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: ($$[$0-2].value >= $$[$0].value) ? 1 : 0
         };
      
break;
case 30:
         //No reasigna el valor del simbolo en la tabla de simbolos
         //symbol_table[$$[$0-2]] = this.$.value = $$[$0].value;
         symbol_table[$$[$0-2]] = $$[$0].value;
         this.$ = {
            type: $$[$0-1],
            left: $$[$0-2],
            right: $$[$0],
            scope: scope
            //value: $$[$0].value
         };
      
break;
case 31: this.$ = {
                      type: 'NUMBER',
                      //value: parseInt(yytext) 
                      scope: scope,
                      value: Number(yytext)
                    };
             
break;
case 32:
       //symbol_table[$$[$0-2]] = this.$.value = $$[$0].value;
       symbol_table[$$[$0-2]] = $$[$0].value;
         this.$ = {
            type: $$[$0-1],
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: $$[$0].value
         };
      
break;
case 33: throw new Error("Can't assign to constant 'π'"); 
break;
case 34: throw new Error("Can't assign to math constant 'e'"); 
break;
case 35:
         this.$ = {
            type: $$[$0-1],
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: $$[$0-2].value + $$[$0].value
         };
      
break;
case 36:
         this.$ = {
            type: $$[$0-1],
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: $$[$0-2].value - $$[$0].value
         };
      
break;
case 37:
         this.$ = {
            type: $$[$0-1],
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: $$[$0-2].value * $$[$0].value
         };
      
break;
case 38:
         if ($$[$0].value == 0) throw new Error("Division by zero, error!");
         this.$ = {
            type: $$[$0-1],
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: $$[$0-2].value / $$[$0].value
         };
      
break;
case 39:
         this.$ = {
            type: $$[$0-1],
            left: $$[$0-2],
            right: $$[$0],
            scope: scope,
            value: Math.pow($$[$0-2].value, $$[$0].value)
         };
      
break;
case 40:
         if ($$[$0-1].value % 1 !== 0) 
              throw "Error! Attempt to compute the factorial of "+
                    "a floating point number "+$$[$0-1];
         this.$ = {
            type: $$[$0],
            left: $$[$0-1],
            scope: scope,
            value: fact($$[$0-1].value)
         };
      
break;
case 41:
         this.$ = {
            type: $$[$0],
            left: $$[$0-1],
            right: $$[$01],
            scope: scope,
            value: $$[$0-1].value/100
         };
      
break;
case 42:this.$ = {
            type: 'MINUS',
            scope: scope,
            value: -$$[$0].value
         };
break;
case 43:this.$ = $$[$0-1];
break;
case 44:this.$ = $$[$0];
break;
case 45:this.$ = {name: $$[$0], scope: scope, value: Math.E};
break;
case 46:this.$ = {name: $$[$0], scope: scope, value: Math.PI};
break;
case 47:this.$ = {name: $$[$0], scope: scope, value: symbol_table[yytext] || 0};
break;
}
},
table: [{3:1,4:2,7:3,11:[1,4],16:[2,3],17:[2,3],21:[2,3],26:[2,3],27:[2,3],30:[2,3],33:[2,3]},{1:[3]},{5:[1,5]},{8:6,16:[1,7],17:[2,7],21:[2,7],26:[2,7],27:[2,7],30:[2,7],33:[2,7]},{12:8,17:[1,9]},{6:[1,10]},{9:11,17:[2,11],19:12,21:[1,13],26:[2,11],27:[2,11],30:[2,11],33:[2,11]},{17:[1,14]},{13:15,14:[2,5],15:[1,16]},{24:[1,17]},{1:[2,1]},{10:18,17:[1,19],26:[1,20],27:[1,21],30:[1,22],33:[1,23]},{14:[2,14],20:24,22:[1,25]},{17:[1,26]},{14:[2,9],15:[1,28],18:27},{14:[1,29]},{12:30,17:[1,9]},{42:31,43:[1,32]},{5:[2,2],14:[2,2]},{24:[1,33]},{17:[1,34]},{10:35,17:[1,19],26:[1,20],27:[1,21],30:[1,22],33:[1,23]},{17:[1,39],22:[1,43],25:38,31:36,35:[1,37],42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:38,31:45,35:[1,37],42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{14:[1,46]},{17:[1,47]},{14:[2,13],22:[2,13]},{14:[1,48]},{17:[1,49]},{16:[2,4],17:[2,4],21:[2,4],26:[2,4],27:[2,4],30:[2,4],33:[2,4]},{13:50,14:[2,5],15:[1,16]},{14:[2,30],15:[2,30]},{5:[2,31],14:[2,31],15:[2,31],23:[2,31],29:[2,31],32:[2,31],34:[2,31],36:[2,31],37:[2,31],38:[2,31],39:[2,31],40:[2,31],41:[2,31],46:[2,31],47:[2,31],48:[2,31],49:[2,31],50:[2,31],51:[2,31],52:[2,31]},{17:[1,39],22:[1,43],25:51,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{5:[2,14],14:[2,14],20:52,22:[1,25],29:[2,14]},{14:[1,54],28:53,29:[2,21]},{32:[1,55]},{17:[1,39],22:[1,43],25:56,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{36:[1,57],37:[1,58],38:[1,59],39:[1,60],40:[1,61],41:[1,62],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,47],14:[2,47],23:[2,47],24:[1,70],29:[2,47],32:[2,47],34:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],51:[2,47],52:[2,47]},{5:[2,46],14:[2,46],23:[2,46],24:[1,71],29:[2,46],32:[2,46],34:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46],52:[2,46]},{5:[2,45],14:[2,45],23:[2,45],24:[1,72],29:[2,45],32:[2,45],34:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],46:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45],52:[2,45]},{17:[1,39],22:[1,43],25:73,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:74,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{5:[2,44],14:[2,44],23:[2,44],29:[2,44],32:[2,44],34:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],51:[2,44],52:[2,44]},{34:[1,75]},{4:76,7:3,11:[1,4],16:[2,3],17:[2,3],21:[2,3],26:[2,3],27:[2,3],30:[2,3],33:[2,3]},{15:[1,28],18:77,23:[2,9]},{17:[2,8],21:[2,8],26:[2,8],27:[2,8],30:[2,8],33:[2,8]},{14:[2,9],15:[1,28],18:78,23:[2,9]},{14:[2,6]},{5:[2,16],14:[2,16],29:[2,16],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,17],14:[2,17],29:[2,17]},{29:[1,79]},{10:80,17:[1,19],26:[1,20],27:[1,21],30:[1,22],33:[1,23]},{10:81,17:[1,19],26:[1,20],27:[1,21],30:[1,22],33:[1,23]},{32:[2,23],34:[2,23],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{17:[1,39],22:[1,43],25:82,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:83,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:84,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:85,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:86,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:87,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:88,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:89,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:90,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:91,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:92,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{5:[2,40],14:[2,40],23:[2,40],29:[2,40],32:[2,40],34:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[2,40]},{5:[2,41],14:[2,41],23:[2,41],29:[2,41],32:[2,41],34:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41]},{17:[1,39],22:[1,43],25:93,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:94,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{17:[1,39],22:[1,43],25:95,42:44,43:[1,32],44:[1,40],45:[1,41],47:[1,42]},{5:[2,42],14:[2,42],23:[2,42],29:[2,42],32:[2,42],34:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[1,68],52:[2,42]},{23:[1,96],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{10:97,17:[1,19],26:[1,20],27:[1,21],30:[1,22],33:[1,23]},{14:[1,98]},{23:[1,99]},{14:[2,10],23:[2,10]},{5:[2,18],14:[2,18],29:[2,18]},{14:[1,54],28:100,29:[2,21]},{5:[2,19],14:[2,19],29:[2,19]},{32:[2,24],34:[2,24],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{32:[2,25],34:[2,25],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{32:[2,26],34:[2,26],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{32:[2,27],34:[2,27],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{32:[2,28],34:[2,28],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{32:[2,29],34:[2,29],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,35],14:[2,35],23:[2,35],29:[2,35],32:[2,35],34:[2,35],36:[2,35],37:[2,35],38:[2,35],39:[2,35],40:[2,35],41:[2,35],46:[2,35],47:[2,35],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,36],14:[2,36],23:[2,36],29:[2,36],32:[2,36],34:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],46:[2,36],47:[2,36],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,37],14:[2,37],23:[2,37],29:[2,37],32:[2,37],34:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],46:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[1,67],51:[1,68],52:[1,69]},{5:[2,38],14:[2,38],23:[2,38],29:[2,38],32:[2,38],34:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],46:[2,38],47:[2,38],48:[2,38],49:[2,38],50:[1,67],51:[1,68],52:[1,69]},{5:[2,39],14:[2,39],23:[2,39],29:[2,39],32:[2,39],34:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],51:[1,68],52:[1,69]},{5:[2,32],14:[2,32],23:[2,32],29:[2,32],32:[2,32],34:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[2,32],41:[2,32],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,33],14:[2,33],23:[2,33],29:[2,33],32:[2,33],34:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[2,33],40:[2,33],41:[2,33],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,34],14:[2,34],23:[2,34],29:[2,34],32:[2,34],34:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],46:[1,63],47:[1,64],48:[1,65],49:[1,66],50:[1,67],51:[1,68],52:[1,69]},{5:[2,43],14:[2,43],23:[2,43],29:[2,43],32:[2,43],34:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],51:[2,43],52:[2,43]},{5:[2,20],14:[2,20],29:[2,20]},{9:101,17:[2,11],19:12,21:[1,13],26:[2,11],27:[2,11],30:[2,11],33:[2,11]},{5:[2,15],14:[2,15],29:[2,15]},{29:[2,22]},{17:[2,12],26:[2,12],27:[2,12],30:[2,12],33:[2,12]}],
defaultActions: {10:[2,1],50:[2,6],100:[2,22]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


//var symbolTables = [{ name: '', father: null, vars: {} }];
var scope = 0; 
//var symbolTable = symbolTables[scope];
var symbol_table = {};
var ambito = {};

function getScope() {
  return scope;
}

function getFormerScope() {
   scope--;
   //symbolTable = symbolTables[scope];
}

function makeNewScope(/*id*/) {
   scope++;
   //symbolTable.vars[id].symbolTable = symbolTables[scope] =  { name: id, father: symbolTable, vars: {} };
   //symbolTable = symbolTables[scope];
   //return symbolTable;
}

function fact (n){ 
  return n==0 ? 1 : fact(n-1) * n 
}

function odd (n) {
   return (n%2)==0 ? 1 : 0
}

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var reserved_words ={ PI: 'PI',
                      E : 'E',
                      CONST: 'const',
                      VAR: 'var',
                      PROCEDURE: 'procedure',
                      CALL: 'call',
                      BEGIN: 'begin',
                      END: 'end',
                      IF: 'if',
                      THEN: 'then',
                      WHILE: 'while',
                      DO: 'do',
                      ODD: 'odd'}

function idORrw(x) {
  return (x.toUpperCase() in reserved_words)? x.toUpperCase() : 'ID'
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and comments */
break;
case 1:return 43
break;
case 2:return idORrw(yy_.yytext)
break;
case 3:return yy_.yytext;
break;
case 4:return yy_.yytext;
break;
case 5:return yy_.yytext;
break;
case 6:return 5
break;
case 7:return 6
break;
case 8:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|#.*)/,/^(?:\b\d+(\.\d*)?([eE][-+]?\d+)?\b)/,/^(?:\b[A-Za-z_]\w*\b)/,/^(?:[-*/+^!%=();,])/,/^(?:[<>=!][=])/,/^(?:[<>])/,/^(?:\.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculator;
exports.Parser = calculator.Parser;
exports.parse = function () { return calculator.parse.apply(calculator, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}